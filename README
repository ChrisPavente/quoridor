Note this is an internal documentation on the classes that make up the game. We have another branch called "release" which contains the jar files of our releases and README's for instructions on how to run the specific release.

Package board-
    Player.java-
        Constructor: Player(Square s, int walls, int num)
                       --takes in the Square the player is in, the number of walls the player has and the number player
                       --also sets the default color of the player based on the number the player is.
        Fields:int walls, Square square, int num, Color[] color
        Methods: getSquare() returns the field square
        		 isAWinner() returns a boolean for if the player is a winner
                 getWallNum() returns walls
                 useWall() decrements walls by one
                 move(Square s) sets square to s
                 getNum() returns the players reference number
                 (Private) setDefaultColor() sets the players game piece color
                 getColor() returns the player's color
                 isActive() returns true if the player is in the game
                 removePlayer() kicks the player from the game

    Square.java-
        Static Class Methods:
            - setNeightbours(Square[][] squares, int h, int w)
                Sets up the squares of the array to be linked to
                the squares adjacent to it in the array

        Constructor: Square(int row, int col)
                      -- new Square object has null reference for Up,Right,Down,Left and sets this.row to row and this.col to col

        Fields: int row, int col, Square adjacent-(Up,Down,Left,Right), boolean occupied
        Methods: getNeighbour(int n) returns the square adjacent to this square in the direction of n, that is n=0 is Up n=1 is Right n=2 is Down and n=3 is Left.
                 getRow() returns row
                 getCol() returns col
                 isOccupied() returns true if the square is occupied, false otherwise
                 isNowOccupied() sets a square's flag to occupied when a player moves to that square
                 isFree() releases a square from being occupied
                 breakLink(Square s) breaks the link between this and Square s if there is one and returns false if there wasn't a link to begin with.
                 relink(Square s, int n) links this and Square s in the direction indicated by n, that is if n=0 this.adjacentDown becomes s and s.adjacentUp becomes this
                
    Board.java-  
        Static Fields: WALLS, HEIGHT, WIDTH
        Constructor: Board(int n) the number of players playing the game
        Fields: Square[][] grid, List<Player> players

        Methods: (Private) createGrid() creates the board game grid
        		 (Private) placeWall(int x1, int y1, int x2, int y2) places a wall in the desired location
        		 (Private) unDoPlaceWall(int i, int j, boolean direction) removes a wall from the grid
        		 (Private) getSquareAt(int i, int j) finds the square at the given values
        		 getPlayers() returns the list of players
                 getSquare(int i, int j) returns grid[i][j]
                 makeMove(String s) makes the move encoded in String S if its a legal move or will return false if it is not
                 convertRowToInt(char c) returns the integer row equivalent to the given char
                 convertColToInt(String s) returns the integer col equivalent to the given char
                 (Private) checkIfLegalPlayerMove(int r, int c, int num) checks if desired move is legal
                 (Private) recursiveJumpCheck(Square cur, Square goal, int tally) checks for jumps
                 (Private) checkIfWallIsThere(int r, int c, boolean b) check for wall locations
                 (Private) checkIfPlayerIsThere(Square s) check for player location
                 (Private) checkIfPlayerIsThere(int r, int c) check for player location
                 toString() prints a string representation of the board
                 isWinner(int kickedPlayers) returns the winner of the game
                 
Package displayClient-
	DisplayClient.java-
		Constructor: DisplayClient(String[] players) the players playing the game
		Fields: int numOfPlayers, String[] hostNames, String[] playerIDs, int[] playerPorts, Socket[] sockets,
				BufferedReader[] input, PrintWriter[] output, boolean victor, Board board, int round
				
		Methods: SetUp(String[] players) adds players info to lists
				 printData() prints the information about players
				 socketSetUp() creates sockets and input/outputs
				 sendPlayerMessage() sends a message to all players to start the game
				 sendMessageToAll(String message) sends a given string to all players
				 playRound() traverses through each player asking for a move
				 sendGoMessage(int playerOffset) sends "go?" to ask for a players move
				 sendWentMessage(int playerOffset, String move) sends the move to all players
				 checkIfLegal(int playerOffset, String move) checks if the move was legal
				 sendBootMessage(int playerOffset) sends the message to all players that a player made an illegal move and was booted
				 checkIfVictor() checks if the player has won
				 sendVictorMessage(int playerOffset) sends the message to all players when a person is victorious
				 convertPlayerNum(int i) checks to see which player's turn it is
				 
Package gui-
	Menu.java-
		Constructor: Menu() instantiate a JFrame player options menu
		Fields: String OPTIONS_WINDOW_TITLE, Quoridor Q, JLabel PlayersLabel, JRadioButton twoPlayers, JRadioButton fourPlayers, ButtonGroup numberOfPlayers
		
		Methods: (Private) initialize() sets the label and buttons
	
	QBoard.java-
		Constructor: QBoard(int num) or QBoard(int num, intID) creates a 9x9 grid of buttons and walls
		Fields: String BOARD_TITLE, Color SQUARE_DEFAULT_COLOR, int boardlth, JButton[][] squares, JButton[][] vertWalls,
				JButton[][] horWalls, JPanel buttonCanvas, Board board, Stack<String> moveStack, String currentMove,
				int playerID, boolean isTurn
		
		Methods: (Private) initialize() instantiates the board with clickable buttons
				 (Private) initializeButtons() instantiates all buttons on the board game grid
				 buttonHelper(int i, int j) helps reduce the amount of redundant code when initiating the buttons
				 getRowLetter(int i) converts the given row to the corresponding letter
				 getColumnRomanNumeral(int j) converts the given column to the roman numeral
				 makeMove(String a, String b, int current) performs the desired move on the grid
				 makeMove(String move, int current) performs the desired move on the grid
				 changeCurrentPlayer(int current) determine the player whose turn it is
				 actionPerformed(ActionEvent action) performs the move
				 getCurrentMove() returns the currentMove
				 setCurrentMoveToNull() sets the currentMove to null
				 setIsTurn(boolean isTurn) sets the correct player's turn
				 setColorOfSpace(int y, int x, Color c) moves the pawn across the board
				 
	Quoridor.java-
		Constructor: Quoridor() instatiates the title page
		Fields: String MAIN_TITLE, String INFO_MESSAGE, String[] BUTTONS, JPanel panel, List<JButton> buttons
		
		Methods: (Private) initializeButtons(JPanel subPanel) sets up the buttons on the subpanel
				 actionPerformed(actionEvent action) creates the link between all buttons and their desired actions
			
				 
      
             
  
